<?xml version="1.0" encoding="UTF-8"?><record_update table="sn_cmp_rb_resourcescript">
    <sn_cmp_rb_resourcescript action="INSERT_OR_UPDATE">
        <name>Azure_List_Managed_Disk_Response_Processor</name>
        <resource display_value="Azure Datacenter">ddf5cd6bd722220097eb6ccf6e610346</resource>
        <script>function processResponse(response, cloudServiceAccountId, ldc, correlationId,step, requestorContext) {&#13;
	var cloudModelString = [];&#13;
	var volumeInfo = global.JSON.parse(response);&#13;
	var reqContext = global.JSON.parse(requestorContext);&#13;
&#13;
	if(volumeInfo){&#13;
		var disks = volumeInfo.dataDisk;&#13;
		disks = disks.concat(volumeInfo.osDisk);&#13;
		if(disks &amp;&amp; disks.length &gt; 0){&#13;
			for (var i=0; i&lt; disks.length; i++){&#13;
				var endpoints = [];&#13;
				var volume = disks[i];&#13;
				var volumeId = volume.id;&#13;
				var state = 'available';&#13;
				&#13;
				if(volume.state === 'attached' || volume.state === 'Attached' || volume.state === 'leased'|| volume.state === 'Leased'){&#13;
					state = 'leased';&#13;
					var endPointId = volumeId;&#13;
					var enpoint = {&#13;
						"attach_to":{&#13;
							"implemented_by":{&#13;
								"endpoint_ci":"cmdb_ci_endpoint_block",&#13;
								"endpoint_identification":{&#13;
									"object_id": endPointId&#13;
								},&#13;
								"attributes":{&#13;
									"attachment_info": state,&#13;
									"mount_point": '',&#13;
									"attach_time": '',&#13;
									"host": volume.ownerId ? volume.ownerId : '',&#13;
									"name": endPointId&#13;
								}&#13;
							}&#13;
						}&#13;
					};&#13;
					endpoints.push(enpoint);&#13;
				}&#13;
				&#13;
				var volumeData = {&#13;
					"cmdb_ci_storage_volume": {&#13;
						"validator": "default_storage_volume_validator",&#13;
						"validator_overrides": { },&#13;
						"identification": {&#13;
							"cmdb_ci_cloud_service_account": {&#13;
								"criterion": {&#13;
									"object_id": cloudServiceAccountId&#13;
								}&#13;
							},&#13;
							"cmdb_ci_azure_datacenter": {&#13;
								"criterion": {&#13;
									"object_id": ldc&#13;
								}&#13;
							},&#13;
							"cmdb_ci_storage_volume": {&#13;
								"criterion": {&#13;
									"object_id": volumeId&#13;
								}&#13;
							}&#13;
						},&#13;
						"attributes": {&#13;
							"object_id": volumeId,&#13;
							"volume_id": volumeId,&#13;
							"name": volume.name,&#13;
							"total_size_gb":volume.diskSizeGB,&#13;
							"size_bytes":volume.diskSizeGB*1024*1024*1024,&#13;
							"storage_type":"PageBlob",&#13;
							"state":state,&#13;
							"volume_type":volume.accountType,&#13;
							"assigned_to":reqContext.userId,&#13;
							"assignment_group":reqContext.groupId&#13;
						},&#13;
						"references": {&#13;
							"cmdb_ci_resource_group": {&#13;
								"identification": {&#13;
									"cmdb_ci_cloud_service_account": {&#13;
										"criterion": {&#13;
											"object_id": cloudServiceAccountId&#13;
										}&#13;
									},&#13;
									"cmdb_ci_azure_datacenter": {&#13;
										"criterion": {&#13;
											"object_id": ldc&#13;
										}&#13;
									},&#13;
									"cmdb_ci_resource_group": {&#13;
										"criterion": {&#13;
											"object_id": volume.resourceGroup&#13;
										}&#13;
									}&#13;
								},&#13;
								"attributes": {&#13;
									"object_id": volume.resourceGroup&#13;
								}&#13;
							}&#13;
						},&#13;
						"bindings": endpoints&#13;
					}&#13;
				};&#13;
				&#13;
				// Include tagValues if there are any&#13;
				if (!gs.nil(volume.tags))&#13;
					volumeData.cmdb_ci_storage_volume.tagValues= global.JSON.stringify(volume.tags);&#13;
				&#13;
				&#13;
				cloudModelString.push(volumeData);&#13;
			}&#13;
		}&#13;
	}&#13;
&#13;
	return global.JSON.stringify(cloudModelString);&#13;
}</script>
        <script_js><![CDATA[function processResponse(response, cloudServiceAccountId, ldc, correlationId,step, requestorContext) {
	var cloudModelString = [];
	var volumeInfo = global.JSON.parse(response);
	var reqContext = global.JSON.parse(requestorContext);

	if(volumeInfo){
		var disks = volumeInfo.dataDisk;
		disks = disks.concat(volumeInfo.osDisk);
		if(disks && disks.length > 0){
			for (var i=0; i< disks.length; i++){
				var endpoints = [];
				var volume = disks[i];
				var volumeId = volume.id;
				var state = 'available';
				
				if(volume.state === 'attached' || volume.state === 'Attached' || volume.state === 'leased'|| volume.state === 'Leased'){
					state = 'leased';
					var endPointId = volumeId;
					var enpoint = {
						"attach_to":{
							"implemented_by":{
								"endpoint_ci":"cmdb_ci_endpoint_block",
								"endpoint_identification":{
									"object_id": endPointId
								},
								"attributes":{
									"attachment_info": state,
									"mount_point": '',
									"attach_time": '',
									"host": volume.ownerId ? volume.ownerId : '',
									"name": endPointId
								}
							}
						}
					};
					endpoints.push(enpoint);
				}
				
				var volumeData = {
					"cmdb_ci_storage_volume": {
						"validator": "default_storage_volume_validator",
						"validator_overrides": { },
						"identification": {
							"cmdb_ci_cloud_service_account": {
								"criterion": {
									"object_id": cloudServiceAccountId
								}
							},
							"cmdb_ci_azure_datacenter": {
								"criterion": {
									"object_id": ldc
								}
							},
							"cmdb_ci_storage_volume": {
								"criterion": {
									"object_id": volumeId
								}
							}
						},
						"attributes": {
							"object_id": volumeId,
							"volume_id": volumeId,
							"name": volume.name,
							"total_size_gb":volume.diskSizeGB,
							"size_bytes":volume.diskSizeGB*1024*1024*1024,
							"storage_type":"PageBlob",
							"state":state,
							"volume_type":volume.accountType,
							"assigned_to":reqContext.userId,
							"assignment_group":reqContext.groupId
						},
						"references": {
							"cmdb_ci_resource_group": {
								"identification": {
									"cmdb_ci_cloud_service_account": {
										"criterion": {
											"object_id": cloudServiceAccountId
										}
									},
									"cmdb_ci_azure_datacenter": {
										"criterion": {
											"object_id": ldc
										}
									},
									"cmdb_ci_resource_group": {
										"criterion": {
											"object_id": volume.resourceGroup
										}
									}
								},
								"attributes": {
									"object_id": volume.resourceGroup
								}
							}
						},
						"bindings": endpoints
					}
				};
				
				// Include tagValues if there are any
				if (!gs.nil(volume.tags))
					volumeData.cmdb_ci_storage_volume.tagValues= global.JSON.stringify(volume.tags);
				
				
				cloudModelString.push(volumeData);
			}
		}
	}

	return global.JSON.stringify(cloudModelString);
}]]></script_js>
        <sys_class_name>sn_cmp_rb_resourcescript</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-03-24 11:44:23</sys_created_on>
        <sys_id>011e41040b3532003969a387b6673aae</sys_id>
        <sys_mod_count>9</sys_mod_count>
        <sys_name>Azure_List_Managed_Disk_Response_Processor</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sn_cmp_rb_resourcescript_011e41040b3532003969a387b6673aae</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-02-15 00:33:25</sys_updated_on>
        <type>7</type>
    </sn_cmp_rb_resourcescript>
</record_update>
