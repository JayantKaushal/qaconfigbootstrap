<?xml version="1.0" encoding="UTF-8"?><record_update table="sn_cmp_pol_template">
    <sn_cmp_pol_template action="INSERT_OR_UPDATE">
        <logic_name>policy</logic_name>
        <name>policy</name>
        <sys_class_name>sn_cmp_pol_template</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-01-18 05:35:14</sys_created_on>
        <sys_id>68f901075b103200a821273a41f91ae1</sys_id>
        <sys_mod_count>224</sys_mod_count>
        <sys_name>policy</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sn_cmp_pol_template_68f901075b103200a821273a41f91ae1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-08-02 08:12:25</sys_updated_on>
        <template>var policyId = ""; &#13;
var inputMap = JSON.parse(inputMapStr);&#13;
gs.info("inputMapStr = " + inputMapStr);&#13;
var outputMap = {};&#13;
outputMap.inputMap = inputMap;&#13;
outputMap.inputMap.abortProcess = false;&#13;
outputMap.policyName = "${policyname}";&#13;
outputMap.isError = false;&#13;
outputMap.suspendProcess = false;&#13;
outputMap.logs = {};&#13;
outputMap.logs.message = "";&#13;
outputMap.logs.rules = [];&#13;
outputMap.logs.isSuccessful = false;&#13;
outputMap.logs.isError = false;&#13;
 &#13;
var MESSAGE_TYPE_DEBUG = "1";&#13;
var MESSAGE_TYPE_INFO = "2";&#13;
var MESSAGE_TYPE_WARN = "3";&#13;
var MESSAGE_TYPE_ERROR = "4";&#13;
&#13;
var RESERVEIP = "1";&#13;
var DEPROVISION = "2";&#13;
var REGISTERIP = "3";&#13;
&#13;
function ${policymodifiedname}() {&#13;
	try {&#13;
//               gs.info('inside policy ${policymodifiedname}' );&#13;
		var isSuccessful = false;&#13;
		policyId = "${policyId}";&#13;
		${rules}&#13;
	} catch (err) {&#13;
                gs.error( 'Policy execution failed. Policy name ${policymodifiedname} error = ' + err);&#13;
		outputMap.logs.isSuccessful = false;&#13;
		outputMap.logs.isError = true;&#13;
		outputMap.logs.errorMessage = err.message;&#13;
	}&#13;
	return JSON.stringify(outputMap);&#13;
}&#13;
&#13;
function checkUserCondition( type, value,userEntityMap, operation){&#13;
	var isValid = false;&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
	if( type == 'group') {&#13;
            isValid = policyExecutionUtil.isGroupMember(outputMap.inputMap.userData.userId, value, operation);&#13;
	} else if(type == 'role') {&#13;
            isValid = policyExecutionUtil.isRoleMember(outputMap.inputMap.userData.userId, value, operation);&#13;
	} else{&#13;
             isValid = policyExecutionUtil.evaluateUserCondition(outputMap.inputMap.userData.userId, type, value, operation, JSON.stringify(outputMap));&#13;
       }&#13;
	return isValid;&#13;
}&#13;
&#13;
//validate condition&#13;
function validateCondition( operand, operator, value, condition){&#13;
	var isError = false;&#13;
	var isSuccessful = false;&#13;
	try {&#13;
		condition.operand = operand;&#13;
		condition.operator = operator;&#13;
		condition.value = value;&#13;
		conditions[conditions.length] = condition;&#13;
		switch(operator){&#13;
			case "==":&#13;
				isSuccessful = (operator == value);&#13;
				break;&#13;
			case "!=":&#13;
				isSuccessful = (operator != value);&#13;
				break;&#13;
			case "&gt;":&#13;
				isSuccessful = (operator &gt; value);&#13;
				break;&#13;
			case "&lt;":&#13;
				isSuccessful = (operator &lt; value);&#13;
				break;&#13;
			default:&#13;
		}&#13;
	}catch( exception){&#13;
		isError = true;&#13;
		isSuccessful = false;&#13;
	}&#13;
	condition.isSuccessful = isSuccessful;&#13;
	condition.isError = isError;&#13;
}&#13;
&#13;
function checkList( value, userEntityMap, validateIn, attributeName){&#13;
	var isValid = false;&#13;
	var userEntityMapLength = userEntityMap.length;&#13;
	for( var i=0;i&lt;userEntityMapLength; i++){&#13;
		if( value == userEntityMap[i][attributeName]){&#13;
			isValid = true;&#13;
			break;&#13;
		}&#13;
	}&#13;
	if( !validateIn){&#13;
		isValid = !isValid;&#13;
	}&#13;
	return isValid;&#13;
}&#13;
&#13;
function checkValue( operand, operator, value){&#13;
	var isSuccessful = false;&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();	&#13;
	var action ={};&#13;
	action.operation= "";&#13;
//gs.info( 'operand = ' + operand + '   operator = '  + operator  + ' value = ' + value);&#13;
	value = policyExecutionUtil.resolveExpressions( action, value, outputMap.inputMap);	&#13;
	if(operand == null){&#13;
		if( typeof value  == 'number'){&#13;
			operand = 0;&#13;
		}else{&#13;
			operand = "";&#13;
		}&#13;
	}&#13;
	switch(operator.toLowerCase()){&#13;
	    case "equalsIgnoreCase":&#13;
	    isSuccessful = false;&#13;
	    if(operand != null &amp;&amp; value != null){&#13;
	    	isSuccessful = (operand.toLowerCase() == value.toLowerCase());&#13;
	    } &#13;
	    break;&#13;
	    case "contains":&#13;
	    //handle array and collection later&#13;
	    isSuccessful = false;&#13;
	    if(operand != null &amp;&amp; value != null){&#13;
//                gs.info( 'inside contains  ' + operand.indexOf(value));&#13;
	    	isSuccessful = (operand.toLowerCase().indexOf(value.toLowerCase()) != -1);&#13;
	    }	&#13;
	    break;&#13;
	    case "containsIgnoreCase":&#13;
	    isSuccessful = false;&#13;
	    if(operand != null &amp;&amp; value != null){&#13;
	    	isSuccessful = (operand.toLowerCase().indexOf(value.toLowerCase()) != -1);&#13;
	    }	&#13;
	    break; 	        &#13;
		case "==":&#13;
		isSuccessful = (operand == value);&#13;
		break;&#13;
		case "!=":&#13;
		isSuccessful = (operand != value);&#13;
		break;&#13;
		case "&gt;":&#13;
		isSuccessful = (operand &gt; value);&#13;
		break;&#13;
	       case "&gt;=":&#13;
//               gs.info( operand + '&gt;=' + value);&#13;
		isSuccessful = (operand &gt;= value);&#13;
		break;&#13;
		case "&lt;=":&#13;
		isSuccessful = (operand &lt;= value);&#13;
		break;	&#13;
		case "does not contain":&#13;
		isSuccessful = false;&#13;
		if(operand != null &amp;&amp; value != null){&#13;
			isSuccessful = (operand.toLowerCase().indexOf(value.toLowerCase()) == -1);&#13;
		}&#13;
		break;&#13;
		case "startswith":&#13;
		isSuccessful = false;&#13;
		if(operand != null &amp;&amp; value != null){&#13;
			isSuccessful = operand.startsWith(value);&#13;
		}&#13;
		break;&#13;
		case "endswith":&#13;
		isSuccessful = false;&#13;
		if(operand != null &amp;&amp; value != null){&#13;
			isSuccessful = operand.endsWith(value);&#13;
		}&#13;
		break;&#13;
		default:&#13;
	}&#13;
	return isSuccessful;&#13;
}&#13;
&#13;
function checkBudgetConditionBuilder( budgetConsumptionType, operator, value){&#13;
        var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
        return policyExecutionUtil.checkBudgetConsumptionBuilder(inputMap, outputMap,budgetConsumptionType, operator, value);&#13;
}&#13;
&#13;
function checkBudgetCondition( conditionId, inputMap){&#13;
        var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
        return policyExecutionUtil.checkBudgetConsumption(conditionId, inputMap, outputMap);&#13;
}&#13;
&#13;
function checkFreeFormCondition( conditionId, inputMap){&#13;
       var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
       return policyExecutionUtil.checkFreeFormCondition(conditionId, inputMap, outputMap);&#13;
}&#13;
&#13;
function checkDefaultCondition( conditionId, inputMap){&#13;
       var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
       return policyExecutionUtil.checkFreeFormCondition(conditionId, inputMap, outputMap);       &#13;
}&#13;
&#13;
function approvalActions( rule, approvalObj, actionId){&#13;
	var action  = {};&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
	rule.actions[rule.actions.length] = action;&#13;
	if( gs.nil(outputMap.inputMap.approval)){&#13;
		action.operation="approvalActions : " + JSON.stringify(approvalObj);&#13;
		outputMap.inputMap.approval = approvalObj;&#13;
                if( approvalObj != null){&#13;
                       action.message ="Invoking Approval Task " + approvalObj.approvalUserNames + "  " + approvalObj.approvalGroupNames + "  "+ outputMap.inputMap.requestItemId;&#13;
                       policyExecutionUtil.updateRuleLog( outputMap, MESSAGE_TYPE_INFO, "Apply Policy Rule Action", action, true);&#13;
               }&#13;
	} else {&#13;
		action.operation="approvalActions : skipped.";&#13;
	}&#13;
}&#13;
&#13;
function propertyAction( rule, property, value, isScript, actionId){&#13;
	var action = {};&#13;
//	gs.info('propertyAction() property = ' + property + ' value = ' + value);&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
	rule.actions[rule.actions.length] = action;&#13;
	action.operation = "";&#13;
	var outputVal = policyExecutionUtil.resolveExpressions( action, value, outputMap.inputMap);&#13;
	if( isScript == "true"){&#13;
		action.operation += "\n Property is evaluated through a script"&#13;
		var scriptEvaluated = scriptAction( rule, actionId, outputMap.inputMap);&#13;
		try{&#13;
//			gs.info( "scriptEvaluated = " + scriptEvaluated);&#13;
			if( scriptEvaluated != null &#13;
				&amp;&amp; scriptEvaluated.formData != null&#13;
				&amp;&amp; scriptEvaluated.formData[property] != null) {&#13;
				outputVal = scriptEvaluated.formData[property];&#13;
			}&#13;
		}catch( err){&#13;
			gs.info("propertyAction() error during property assignment " + err);&#13;
		}&#13;
	}&#13;
	action.operation += "\noutputMap.inputMap.formData." + property + "=" + outputVal;&#13;
	outputMap.inputMap.formData[property] = outputVal;&#13;
    action.message = "Updating Parameter " +  property + " to " + outputMap.inputMap.formData[property] ;&#13;
	policyExecutionUtil.updateRuleLog( outputMap,MESSAGE_TYPE_INFO, "Apply Policy Rule Action", action, false);&#13;
}&#13;
&#13;
function abortAction( rule, message, actionId){&#13;
	var action = {};&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
	rule.actions[rule.actions.length] = action;&#13;
	action.operation = "Stop execution of request ";&#13;
	outputMap.inputMap.abortProcess = true;&#13;
	outputMap.inputMap.message = message;&#13;
	action.message = message;&#13;
	policyExecutionUtil.updateRuleLog( outputMap, MESSAGE_TYPE_INFO, "Apply Policy Rule Action", action, false);&#13;
}&#13;
&#13;
function scriptAction( rule, actionId, parameters, scriptName){&#13;
	var action = {};&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
	rule.actions[rule.actions.length] = action;&#13;
	var inputStr =  "execute script for action with id " +actionId ;&#13;
	inputStr += "parameters = " + JSON.stringify( parameters);&#13;
    var policyScript = new sn_cmp_api.PolicyServiceScript();&#13;
    var outputParameterStr = policyScript.invokeAction(actionId, JSON.stringify( parameters));&#13;
    //gs.info("scriptAction parameters = "+ JSON.stringify(parameters));&#13;
    if( outputParameterStr != null){&#13;
    	try{&#13;
    		var outputParameter = JSON.parse(outputParameterStr);&#13;
//    		gs.info("scriptAction outputParameterStr = "+ outputParameterStr);&#13;
    		if( outputParameter.answer != null &amp;&amp;&#13;
    			outputParameter.answer.formData != null){&#13;
    			parameters.formData = outputParameter.answer.formData;	&#13;
//    			gs.info("scriptAction parameters = "+ JSON.stringify(parameters));&#13;
    		}&#13;
    	}catch( err){&#13;
    		gs.info("scriptAction() while assingning formData = " + err);&#13;
    	}&#13;
    }&#13;
    inputStr += "output parameters = " + outputParameterStr;   &#13;
    action.operation = inputStr;  &#13;
    action.message = "Invoking script " + scriptName +" for " +  outputMap.policyName;&#13;
	policyExecutionUtil.updateRuleLog( outputMap, MESSAGE_TYPE_INFO, "Apply Policy Rule Action", action, false);&#13;
    return parameters;&#13;
}&#13;
&#13;
function catalogRequestAction( rule, workflowId, actionId, workflowName){&#13;
	var action = {};&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
	rule.actions[rule.actions.length] = action;&#13;
	action.operation = "outputMap.logs.workflowId = " + workflowId;&#13;
	if(gs.nil(outputMap.inputMap.workflowId)){&#13;
		outputMap.inputMap.workflowId = workflowId;&#13;
		action.message = "Invoking workflow with id "+ workflowName;&#13;
		policyExecutionUtil.updateRuleLog( outputMap, MESSAGE_TYPE_INFO, "Apply Policy Rule Action", action, false);&#13;
	}else{&#13;
		action.message = "Skipping workflow with id "+ workflowName;&#13;
	}&#13;
}&#13;
   &#13;
function ipamAction( rule, actionId, name, ipamProviderType, ipamMethod, attributes){&#13;
	gs.info("ipamAction Invoke IPAM Action  name = "+ name + " ipamMethod = " + ipamMethod &#13;
			+ " outputMap = " +  JSON.stringify(outputMap.inputMap)&#13;
			+ " attributes = " + JSON.stringify(attributes));&#13;
	var action = {};&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
	var operationLog = "IPAMAction Inputs name = " + name &#13;
						+ " ipamMethod = " + ipamMethod&#13;
						+ " actionId = " + actionId&#13;
						+ " attributes = " + attributes&#13;
						+" \n";		&#13;
	var nodeId = outputMap.inputMap.ciInstanceId;	&#13;
&#13;
        if(ipamMethod == DEPROVISION){&#13;
                  nodeId = outputMap.inputMap.formData.ServerId;&#13;
        }			&#13;
	if( ipamMethod == DEPROVISION || ipamMethod ==REGISTERIP ){&#13;
		//gs.info("ipamAction() orderId = " + outputMap.inputMap.orderId);&#13;
		var ipamInfo = policyExecutionUtil.getIPAMInfoForNode(nodeId, outputMap.inputMap.orderId);&#13;
		gs.info("ipamAction ipamInfo = " + JSON.stringify(ipamInfo) + " nodeId = " + nodeId + " ciInstanceId = " + outputMap.inputMap.ciInstanceId + " ServerId =  " +  outputMap.inputMap.formData.ServerId);&#13;
		if(!gs.nil(ipamInfo)){&#13;
			outputMap.inputMap.formData.IPAddress = ipamInfo.privateIP;&#13;
			outputMap.inputMap.formData.SubnetId = ipamInfo.subnet;&#13;
		}&#13;
	}					&#13;
	var providerTableExp = '$(ci.sn_cmp_ip_pool[subnet=${parameter.formData.SubnetId}].ipam_provider)';				&#13;
	var providerTable = policyExecutionUtil.resolveExpressions( action,providerTableExp,outputMap.inputMap);&#13;
	var provider = "";&#13;
	if( !gs.nil(providerTable)){&#13;
		var grc = new GlideRecord(providerTable);&#13;
		if( grc.isValid()){&#13;
   			provider = grc.getLabel();&#13;
   			//gs.info( "grc class name = " + grc.getLabel());&#13;
		}&#13;
		gs.info(provider + " provider ");&#13;
	}&#13;
&#13;
&#13;
	var version = "1.0";&#13;
	var credentialsExp = '$(ci.' + ipamProviderType + '[$(ci.sn_cmp_ip_pool[subnet=${parameter.formData.SubnetId}].provider_instance)].credential)';&#13;
	var credentials = policyExecutionUtil.resolveExpressions( action,credentialsExp,outputMap.inputMap);&#13;
	var endpointExp = '$(ci.' + ipamProviderType + '[$(ci.sn_cmp_ip_pool[subnet=${parameter.formData.SubnetId}].provider_instance)].url)';&#13;
	var endpointUrl = policyExecutionUtil.resolveExpressions( action, endpointExp,outputMap.inputMap);&#13;
	var serviceAccount = '';&#13;
	var location = '';&#13;
	if(outputMap.inputMap.formData != null  &amp;&amp; outputMap.inputMap.formData.Location != null){&#13;
		location = outputMap.inputMap.formData.Location;&#13;
	}&#13;
	var interfaceName = "IPAM Interface";&#13;
	var method = "compute method id";&#13;
	var methodName = "CreateHostRecord";&#13;
	if( ipamMethod == DEPROVISION){&#13;
		methodName = "DeleteHostRecord";&#13;
	}&#13;
	var mode = "Pre";&#13;
	var modeId = policyExecutionUtil.resolveExpressions( action, "$(ci.sn_cmp_ip_pool[subnet=${parameter.formData.SubnetId}].mode)",outputMap.inputMap);&#13;
    if( !gs.nil(modeId)){&#13;
		switch(modeId){&#13;
			case "1":&#13;
			mode = "Pre";&#13;
			break;	&#13;
			case "2":&#13;
			mode = "Post";&#13;
			break;&#13;
			case "3":&#13;
			mode = "DHCP";&#13;
			break;	&#13;
		}&#13;
	}&#13;
	var attributeStr = JSON.stringify(attributes);&#13;
	attributeStr = policyExecutionUtil.resolveExpressions( action,attributeStr,outputMap.inputMap);&#13;
	attributeStr = attributeStr.replace("${mode}", mode);&#13;
	rule.actions[rule.actions.length] = action;&#13;
	operationLog = "Modified Call inputs "&#13;
						+ " method = " + ipamMethod&#13;
						+ " actionId = " + actionId&#13;
						+ " name = " + name&#13;
						+ " provider = " + provider&#13;
						+ " version = " + version&#13;
						+ " credentials = " + credentials&#13;
						+ " endpointUrl = " + endpointUrl&#13;
						+ " interfaceName = " + interfaceName&#13;
						+ " methodName = " + methodName&#13;
						+ " attributes = " + attributeStr&#13;
                        + "endpointExp = " + endpointExp&#13;
                        + "credentialsExp = " + credentialsExp&#13;
						+ " serviceAccount = " + serviceAccount&#13;
						+ " Location = " + location                        &#13;
						+" \n";&#13;
	&#13;
	var skipCAPICall = false;&#13;
	if( gs.nil(provider)){&#13;
		skipCAPICall = true;&#13;
		operationLog += "Provider cannot be empty. CAPI call will be skipped.";&#13;
	}&#13;
	if( gs.nil(credentials)){&#13;
		skipCAPICall = true;&#13;
		operationLog += "Credential cannot be empty. CAPI call will be skipped.";&#13;
	}&#13;
&#13;
	if(skipCAPICall){&#13;
		action.message = "Skipping IPAM Action " + interfaceName +"." + methodName;&#13;
	}else{&#13;
               var locationName = getLocation(location);&#13;
		var capi = new sn_cloud_api.CAPIOrchestratorServiceScript();&#13;
		var routeId = capi.executeApi(provider, version, credentials, interfaceName, methodName, endpointUrl,  attributeStr, 'policy', serviceAccount, locationName);&#13;
		action.operation += "Computed routeId = " + routeId&#13;
							+ "\n";&#13;
		capiPostAction( action, routeId, name, actionId);&#13;
	    action.message = "Invoking Cloud API " + interfaceName +"." + methodName;	&#13;
	}&#13;
	action.operation = operationLog;&#13;
	policyExecutionUtil.updateRuleLog( outputMap, MESSAGE_TYPE_INFO, "Apply Policy Rule Action", action, false);&#13;
}&#13;
   &#13;
function capiAction( rule, actionId, name, provider, version, credentials, endpointUrl, interfaceId, interfaceName, method, methodName, attributes){&#13;
	gs.info("capiAction Invoke CAPI Call  interfaceId = "+ interfaceId + " method = " + method &#13;
			+ " outputMap = " +  JSON.stringify(outputMap.inputMap)&#13;
			+ " provider = " + provider&#13;
			+ " version  = " + version&#13;
			+ " credentials = " + credentials);&#13;
	var action = {};&#13;
	var policyExecutionUtil = new sn_cmp.PolicyExecutionUtil();&#13;
	var serviceAccount = '';&#13;
	var location = '';&#13;
	if(outputMap.inputMap.formData != null  &amp;&amp; outputMap.inputMap.formData.Location != null){&#13;
		location = outputMap.inputMap.formData.Location;&#13;
	}&#13;
&#13;
	var operationLog = "CAPI Call inputs " + interfaceId &#13;
						+ " method = " + method&#13;
						+ " actionId = " + actionId&#13;
						+ " name = " + name&#13;
						+ " provider = " + provider&#13;
						+ " version = " + version&#13;
						+ " credentials = " + credentials&#13;
						+ " endpointUrl = " + endpointUrl&#13;
						+ " interfaceName = " + interfaceName&#13;
						+ " methodName = " + methodName&#13;
						+ " attributes = " + attributes&#13;
						+ " serviceAccount = " + serviceAccount&#13;
						+ " Location = " + location&#13;
						+" \n";&#13;
	provider = policyExecutionUtil.resolveExpressions( action,provider,outputMap.inputMap);&#13;
	version = policyExecutionUtil.resolveExpressions( action,version,outputMap.inputMap);&#13;
	credentials = policyExecutionUtil.resolveExpressions( action,credentials,outputMap.inputMap);&#13;
	interfaceId = policyExecutionUtil.resolveExpressions( action, interfaceId,outputMap.inputMap);&#13;
	endpointUrl = policyExecutionUtil.resolveExpressions( action, endpointUrl,outputMap.inputMap);&#13;
	interfaceName = policyExecutionUtil.resolveExpressions( action, interfaceName,outputMap.inputMap);&#13;
	method = policyExecutionUtil.resolveExpressions( action, method,outputMap.inputMap);&#13;
	methodName = policyExecutionUtil.resolveExpressions( action,methodName,outputMap.inputMap);&#13;
	var attributeStr = JSON.stringify(attributes);&#13;
	attributeStr = policyExecutionUtil.resolveExpressions( action,attributeStr,outputMap.inputMap);&#13;
	rule.actions[rule.actions.length] = action;&#13;
	operationLog = "Modified Call inputs " + interfaceId &#13;
						+ " method = " + method&#13;
						+ " actionId = " + actionId&#13;
						+ " name = " + name&#13;
						+ " provider = " + provider&#13;
						+ " version = " + version&#13;
						+ " credentials = " + credentials&#13;
						+ " endpointUrl = " + endpointUrl&#13;
						+ " interfaceName = " + interfaceName&#13;
						+ " methodName = " + methodName&#13;
						+ " attributes = " + attributeStr&#13;
						+ " serviceAccount = " + serviceAccount&#13;
						+ " Location = " + location						&#13;
						+" \n";&#13;
	&#13;
	var skipCAPICall = false;&#13;
	if( gs.nil(provider)){&#13;
		skipCAPICall = true;&#13;
		operationLog += "Provider cannot be empty. CAPI call will be skipped.";&#13;
	}&#13;
	if( gs.nil(credentials)){&#13;
		skipCAPICall = true;&#13;
		operationLog += "Credential cannot be empty. CAPI call will be skipped.";&#13;
	}&#13;
&#13;
	if(skipCAPICall){&#13;
		action.message = "Skipping Cloud API " + interfaceName +"." + methodName;&#13;
	}else{&#13;
               var locationName = getLocation(location);&#13;
		var capi = new sn_cloud_api.CAPIOrchestratorServiceScript();&#13;
		var routeId = capi.executeApi(provider, version, credentials, interfaceName, methodName, endpointUrl,  attributeStr, 'policy',serviceAccount, locationName);&#13;
		action.operation += "Computed routeId = " + routeId&#13;
							+ "\n";&#13;
		capiPostAction( action, routeId, name, actionId);&#13;
	    action.message = "Invoking Cloud API " + interfaceName +"." + methodName;	&#13;
	}&#13;
	action.operation = operationLog;&#13;
	policyExecutionUtil.updateRuleLog( outputMap, MESSAGE_TYPE_INFO, "Apply Policy Rule Action", action, false);&#13;
}&#13;
&#13;
function capiPostAction( action, routeId, name, actionId){&#13;
	var policyService = new sn_cmp_api.PolicyServiceScript();&#13;
	var policyStatusStr = policyService.getPolicyExecutionStatusById( outputMap.inputMap.policyExecutionId);&#13;
	if( action.operation == null)&#13;
		action.operation = "";&#13;
	action.operation += "Policy Status = " + policyStatusStr + "\n";		&#13;
	var policyStatus = JSON.parse( policyStatusStr);&#13;
	var attributeStr = policyStatus.attributes;&#13;
	var attributes = JSON.parse( attributeStr);&#13;
	attributes.contextData = outputMap.inputMap.formData;&#13;
	policyStatus.attributes = JSON.stringify(attributes);&#13;
	var modifiedPolicyStatusStr = JSON.stringify(policyStatus);&#13;
	action.operation += "Modified Policy Status = " + modifiedPolicyStatusStr + "\n";			&#13;
	var updatePolicyExeOutput = policyService.updatePolicyExecutionStatus( modifiedPolicyStatusStr);	&#13;
	var policyExecutionStatusActionDTO  = {};&#13;
	policyExecutionStatusActionDTO.policyExecutionId = outputMap.inputMap.policyExecutionId;&#13;
	policyExecutionStatusActionDTO.policyId =  policyId;&#13;
	policyExecutionStatusActionDTO.status = "inprogress";&#13;
	policyExecutionStatusActionDTO.extCorrelationId = routeId;&#13;
	policyExecutionStatusActionDTO.attributes = policyStatus.attributes;&#13;
	policyExecutionStatusActionDTO.name = name;&#13;
	policyExecutionStatusActionDTO.completedActions = actionId;&#13;
	outputMap.suspendProcess = true;&#13;
	// Update Attributes&#13;
	var actionStatusOutputStr = policyService.createPolicyExecutionActionStatus( JSON.stringify(policyExecutionStatusActionDTO));&#13;
	action.operation += "New action status data = " + actionStatusOutputStr&#13;
						+ "\n";			&#13;
}&#13;
&#13;
function getLocation( locationAlias){&#13;
	var location = locationAlias;&#13;
        if( !gs.nil(location)){&#13;
		var locationGr =  new GlideRecord('sn_cmp_ca_assc_datacenter');&#13;
		if(locationGr.get('alias', locationAlias)){&#13;
	    	      var ldcGR = new GlideRecord('cmdb_ci_logical_datacenter');&#13;
                      if( !gs.nil(locationGr.getValue('ldc_id')) &amp;&amp; ldcGR.get(locationGr.getValue('ldc_id'))){&#13;
                             location = ldcGR.getValue('region');&#13;
	              }&#13;
	        }&#13;
         }&#13;
	return location;&#13;
}&#13;
&#13;
${ruledefinitions}&#13;
&#13;
outputParams = ${policymodifiedname}();&#13;
gs.info("outputParams =  " + outputParams);</template>
    </sn_cmp_pol_template>
</record_update>
