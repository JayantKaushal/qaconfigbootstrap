<?xml version="1.0" encoding="UTF-8"?><record_update table="sn_cmp_rb_resourcescript">
    <sn_cmp_rb_resourcescript action="INSERT_OR_UPDATE">
        <name>List_Nodes_Response_Processor</name>
        <resource display_value="AWS Datacenter">0279b35e0be622009e620bcb15673a2e</resource>
        <script>function processResponse(response, cloudServiceAccountId, ldc, &#13;
						  correlationId, step, requestorContext, stackId) {&#13;
&#13;
	var responseObject = global.JSON.parse(response);&#13;
	var responseProcessor = new sn_cmp.ResponseProcessor(cloudServiceAccountId, &#13;
														 ldc, &#13;
														 'Cloud API',&#13;
														 {"correlationId": correlationId,&#13;
														  "step": step,&#13;
														  "requestorContext": requestorContext,&#13;
														  "stackId": stackId});&#13;
	&#13;
	var cloudModelObject = &#13;
		responseProcessor.processResponseArray(responseObject,&#13;
											   'AWS::EC2::Instance',&#13;
											   'virtual_machine_create_update_validator');&#13;
	responseObject = [].concat(responseObject);&#13;
	var nicArray = [];&#13;
	var rootVolumeArray = [];&#13;
	for (var index=0; index&lt;responseObject.length; index++) {&#13;
		var object = responseObject[index];&#13;
		var networkInterfaces = object.networkInterfaces;&#13;
		if (networkInterfaces)&#13;
			nicArray = nicArray.concat(networkInterfaces);&#13;
		&#13;
		var volumes = object.volumes;&#13;
		if (volumes.length&gt;0){&#13;
			for (var j=0; j&lt;volumes.length; j++) {&#13;
				var volume = volumes[j];&#13;
				//Save root volume details only when response contains size&#13;
				//Save stroage volume when all volume details are known&#13;
				if(!gs.nil(volume.RootVolume) &amp;&amp; volume.RootVolume &amp;&amp; !gs.nil(volume.Size)){&#13;
					var rootVolumeResp = {&#13;
						 "volumeId": volume.VolumeId,&#13;
						"volumeName": volume.VolumeId,&#13;
						"state":volume.State,&#13;
						 "size":volume.Size,&#13;
						"attachments": [&#13;
							  {&#13;
								"volumeId": volume.VolumeId,&#13;
								"instanceId": object.nodeId&#13;
							  }&#13;
							]&#13;
					};&#13;
					rootVolumeArray = rootVolumeArray.concat(volume);&#13;
				}&#13;
			}&#13;
		}&#13;
	}&#13;
	var nicObject = responseProcessor.processResponseArray(nicArray,&#13;
											   'AWS::EC2::NetworkInterface',&#13;
											   'nic_create_validator');&#13;
	cloudModelObject = cloudModelObject.concat(nicObject);&#13;
	&#13;
	var storageObject = responseProcessor.processResponseArray(rootVolumeArray,&#13;
											   'AWS::EC2::Volume',&#13;
											   'storage_volumes_list_validator');&#13;
	cloudModelObject = cloudModelObject.concat(storageObject);&#13;
	&#13;
	return global.JSON.stringify(cloudModelObject);&#13;
 }</script>
        <script_js><![CDATA[function processResponse(response, cloudServiceAccountId, ldc, 
						  correlationId, step, requestorContext, stackId) {

	var responseObject = global.JSON.parse(response);
	var responseProcessor = new sn_cmp.ResponseProcessor(cloudServiceAccountId, 
														 ldc, 
														 'Cloud API',
														 {"correlationId": correlationId,
														  "step": step,
														  "requestorContext": requestorContext,
														  "stackId": stackId});
	
	var cloudModelObject = 
		responseProcessor.processResponseArray(responseObject,
											   'AWS::EC2::Instance',
											   'virtual_machine_create_update_validator');
	responseObject = [].concat(responseObject);
	var nicArray = [];
	var rootVolumeArray = [];
	for (var index=0; index<responseObject.length; index++) {
		var object = responseObject[index];
		var networkInterfaces = object.networkInterfaces;
		if (networkInterfaces)
			nicArray = nicArray.concat(networkInterfaces);
		
		var volumes = object.volumes;
		if (volumes.length>0){
			for (var j=0; j<volumes.length; j++) {
				var volume = volumes[j];
				//Save root volume details only when response contains size
				//Save stroage volume when all volume details are known
				if(!gs.nil(volume.RootVolume) && volume.RootVolume && !gs.nil(volume.Size)){
					var rootVolumeResp = {
						 "volumeId": volume.VolumeId,
						"volumeName": volume.VolumeId,
						"state":volume.State,
						 "size":volume.Size,
						"attachments": [
							  {
								"volumeId": volume.VolumeId,
								"instanceId": object.nodeId
							  }
							]
					};
					rootVolumeArray = rootVolumeArray.concat(rootVolumeResp);
				}
			}
		}
	}
	var nicObject = responseProcessor.processResponseArray(nicArray,
											   'AWS::EC2::NetworkInterface',
											   'nic_create_validator');
	cloudModelObject = cloudModelObject.concat(nicObject);
	
	var storageObject = responseProcessor.processResponseArray(rootVolumeArray,
											   'AWS::EC2::Volume',
											   'storage_volumes_list_validator');
	cloudModelObject = cloudModelObject.concat(storageObject);
	
	return global.JSON.stringify(cloudModelObject);
 }]]></script_js>
        <sys_class_name>sn_cmp_rb_resourcescript</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-10-21 10:24:47</sys_created_on>
        <sys_id>4e79b35e0be622009e620bcb15673a5d</sys_id>
        <sys_mod_count>41</sys_mod_count>
        <sys_name>List_Nodes_Response_Processor</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sn_cmp_rb_resourcescript_4e79b35e0be622009e620bcb15673a5d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-04-25 12:08:39</sys_updated_on>
        <type>7</type>
    </sn_cmp_rb_resourcescript>
</record_update>
