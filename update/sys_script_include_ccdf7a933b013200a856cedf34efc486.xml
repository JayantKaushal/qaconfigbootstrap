<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_cmp.CMPCreateOpImplStepInputParamAction</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CMPCreateOpImplStepInputParamAction</name>
        <script><![CDATA[var CMPCreateOpImplStepInputParamAction = Class.create();
CMPCreateOpImplStepInputParamAction.prototype = Object.extendsObject(sn_smd.SMBaseAction, {
     doAction: function(params) {
		try{
			if (!params.stepId) {
				throw sn_smd.SMErrorHelper.createScriptAPIError(
					gs.getMessage("Illegal parameter"),
					"CMPCreateOpImplStepInputParamAction.doAction: Undefined operation step Id",
					null
				);
			}
			
			var status;
			var ErrMessage = '';
			var postArray = [];
			//var resourceBlocksServiceScript=new sn_cmp_api.ResourceBlockServiceScript();
			
			//Find duplication Operation steps input param
			var getInputParams = JSON.parse(params.postData);
			var getInputParamsLength = getInputParams.length;
			if(getInputParamsLength) {
				for(var i = 0; i < getInputParamsLength; i++) {
					var duplicateName = false;
					var gr = new GlideRecord('sn_cmp_rb_keyvalue');
					if(params.stepId && params.stepId != "")
						gr.addQuery("step", params.stepId);
					if(getInputParams[i].key && getInputParams[i].key != "")
						gr.addQuery("key", getInputParams[i].key);
					gr.query();
					var getSysId;
					if (gr.next()) {
						getSysId = gr.getValue('sys_id');
						duplicateName = true;
						gr.setValue("key", getInputParams[i].key);
						gr.setValue("object_mapping", getInputParams[i].objectMapping == true?'1':'0');
						gr.setValue("value", (getInputParams[i].value != '') ? getInputParams[i].value : '${parameter.'+getInputParams[i].key+ '}');
						gr.update();
						
					} else {
						var grInsert = new GlideRecord('sn_cmp_rb_keyvalue');
						grInsert.setValue("step", params.stepId);
						grInsert.setValue("key", getInputParams[i].key);
						grInsert.setValue("object_mapping", getInputParams[i].objectMapping == true?'1':'0');
						grInsert.setValue("value", (getInputParams[i].value != '') ? getInputParams[i].value : '${parameter.'+getInputParams[i].key+ '}');
						grInsert.insert();
					}
				}
			}
			return {status : true};
			
		} catch (error) {
			var e = error;
			throw sn_smd.SMErrorHelper.createScriptAPIError(
				gs.getMessage("Failed to add operations steps input param."),
				"CMPCreateOpImplStepInputParamAction.doAction(): Failed to add operations steps input param",
				error
			);
		}
    },
    type: 'CMPCreateOpImplStepInputParamAction'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-02-25 15:52:20</sys_created_on>
        <sys_id>ccdf7a933b013200a856cedf34efc486</sys_id>
        <sys_mod_count>20</sys_mod_count>
        <sys_name>CMPCreateOpImplStepInputParamAction</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_include_ccdf7a933b013200a856cedf34efc486</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-05-16 10:21:57</sys_updated_on>
    </sys_script_include>
</record_update>
