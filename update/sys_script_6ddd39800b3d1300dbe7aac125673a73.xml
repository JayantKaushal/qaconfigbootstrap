<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>sn_cmp_workload_provider_type</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Unique Workload Config Provider Type</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

		var provider_type_name = current.name;
		var product_type_id = current.product_type;
		var product_type_name = current.product_type.name;
		var isNew = current.isNewRecord();

		var gr = new GlideRecord('sn_cmp_workload_provider_type');
		gr.addQuery('name', provider_type_name);
		gr.addQuery('product_type', product_type_id);
		gr.query();
		if(gr.next()){
			var errorMessage = gs.getMessage("A workload config provider type with the name {0} already exists for {1} product type.", [provider_type_name, product_type_name]);
			if(isNew) {
			  current.setAbortAction(true);
			  gs.addErrorMessage(errorMessage);
			} else {
				var current_id = current.getUniqueValue();
				var existing_id = gr.getUniqueValue();
				if(current_id != existing_id) {
				 current.setAbortAction(true);
				 gs.addErrorMessage(errorMessage);
				}
			}
		}
	})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-04-26 07:57:23</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>6ddd39800b3d1300dbe7aac125673a73</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>Unique Workload Config Provider Type</sys_name>
        <sys_overrides/>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_6ddd39800b3d1300dbe7aac125673a73</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-04-26 08:03:52</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=6ddd39800b3d1300dbe7aac125673a73"/>
</record_update>
