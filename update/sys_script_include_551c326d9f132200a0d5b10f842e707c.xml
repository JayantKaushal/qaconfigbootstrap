<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>sn_cmp.CMPUtil</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CMPUtil</name>
        <script><![CDATA[var CMPUtil = Class.create();

// Ex: For Stop operation on Virtual Server,
// var catItemId = CMPUtil.getResourceOperationCatalogItem('Virtual Server', '856a7bde0be622009e620bcb15673a14');
CMPUtil.getResourceOperationCatalogItem = function(resourceBlockName, operationSysId){
		var gr = new GlideRecord('sn_cmp_rb_op_cat_map');
		gr.addQuery('resource_block.name', resourceBlockName);
		gr.addQuery('operation', operationSysId);
		gr.query();
		if(gr.next()){
			return gr.cat_item + '';
		}
		return '';
	};

CMPUtil.getCatalogItemByResourceBlockIdAndOperationId = function(resourceBlockId, operationSysId){
		var opeatiomCatItemMapGr = new GlideRecord('sn_cmp_rb_op_cat_map');
		opeatiomCatItemMapGr.addQuery('resource_block', resourceBlockId);
		opeatiomCatItemMapGr.addQuery('operation', operationSysId);
		opeatiomCatItemMapGr.query();
		if (opeatiomCatItemMapGr.next())
			return opeatiomCatItemMapGr.getValue('cat_item');
	
		return '';
	};

CMPUtil.getCITypeInfo = function(table) {
		var tables = new GlideRecord('sys_db_object');
		tables.addQuery('name', table);
		tables.query();
		if (tables.next())
			return {"label":tables.getValue('label'), "sys_id":tables.getValue('sys_id')};
		else 
			return null;
    };

CMPUtil.getIconPath = function(ciTypeId) {
		var icons = new GlideRecord(sn_smd.SMConstants.ICON_MAP_TABLE);
		icons.addQuery('ci_type.sys_id', ciTypeId);
		icons.query();
		if (!icons.next()) {
			var defaultIcon = new GlideRecord(sn_smd.SMConstants.ICON_TABLE);
			defaultIcon.addQuery('label', 'Generic');
			defaultIcon.query();
			defaultIcon.next();
			return defaultIcon.url + '';
		}
		return icons.icon.url + '';
	};

CMPUtil.getVersionList = function(layerId){
		try {
			var layerInstance = sn_smd.SMUtils.loadLayer(layerId);
			var versions = [];
			if(layerInstance) {
				var layerCheckOuts = layerInstance.checkedOuts();

				for(var i =0; i < layerCheckOuts.length; i++) {
					var checkedOutID = layerCheckOuts[i].getSysId();
					var activeCheckedOutCheckpoint = layerCheckOuts[i].getTimeLine().getActiveCheckpoint();
					versions.push(CMPUtil.createVersionObj(activeCheckedOutCheckpoint, checkedOutID));
				}

				var checkedInCheckpoints = layerInstance.getCheckedIn().getAllCheckpoints();

				for(var j = 0; j < checkedInCheckpoints.length; j++) {
					versions.push(CMPUtil.createVersionObj(checkedInCheckpoints[j]));
				}
			}

			versions.sort(this.compareVersions);
			return versions;
		} catch (error) {
			throw sn_smd.SMErrorHelper.createScriptAPIError(gs.getMessage("Failed to load the list of versions"),
			      "CMPUTIL.getVersionList: Failed to load the list of versions",
				  error
			);
		}
	};
	
CMPUtil.getPublishedVersionList = function(layerId) {
		try {
			var layerInstance = sn_smd.SMUtils.loadLayer(layerId);
			var versions = [];
			if(layerInstance) {
				var checkedInCheckpoints = layerInstance.getCheckedIn().getAllCheckpoints();
				for(var j = 0; j < checkedInCheckpoints.length; j++) {
					versions.push(CMPUtil.createVersionObj(checkedInCheckpoints[j]));
				}
			}
			versions.sort(CMPUtil.compareVersions);
			return versions;
		} catch (error) {
			throw sn_smd.SMErrorHelper.createScriptAPIError(gs.getMessage("Failed to load the list of versions"),
			      "CMPUTIL.getPublishedVersionList: Failed to load the list of versions",
				  error
			);
		}
	};
	
CMPUtil.compareVersions = function(a,b) {
		if (a.creationTime > b.creationTime) {
			return -1;
		}
		if (a.creationTime < b.creationTime) {
			return 1;
		}
		//if creation time is the same, sort by version.
		if (a.version > b.version) {
			return -1;
		}
		if (a.version < b.version) {
			return 1;
		}
		return 0;
	};

CMPUtil.createVersionObj = function(checkpoint, checkedOutID){
		var obj = {};
		obj['version'] = checkpoint.getVersion();
		obj['checkpointId'] = checkpoint.getSysId();
		obj['checkedOutId'] = checkedOutID || null;
		obj['creationTime'] = '' + checkpoint.getCreationTime().getDisplayValue();
		obj['displayName'] = checkedOutID ? gs.getMessage("Draft Version {0}", checkpoint.getVersion()) : gs.getMessage("Published Version {0}", checkpoint.getVersion());
		return obj;
};

CMPUtil.getUserPermission = function(created_by, cloudAccountId, operation) {
	if (gs.getUser().hasRole('admin') || gs.getUser().hasRole('sn_cmp.cmp_root_admin') || created_by == gs.getUserName())
	    return true;

	var permissionObj = new CMPCheckPermission();
	var result = permissionObj.checkPermission('cmdb_ci_cmp_cloud_account', cloudAccountId, gs.getUserID(), operation);
	return result;
};

CMPUtil.updateRequestItemComments = function(reqItemSysId, comment){
	if(!gs.nil(reqItemSysId)) {
		var gr = new GlideRecord('sc_req_item');
		if(gr.get(reqItemSysId)) {
			var util = new global.CmpSCUtil();
			util.setJournalEntry(gr, false, true, comment);
		}
	}
};

CMPUtil.getEnglishTextFromTranslated = function(tableName, label) {
    var language = gs.getSession().getLanguage();
    if (language == "en")
        return label;

    var rec = new GlideRecord("sys_translated");
    rec.addQuery("name", tableName);
    rec.addQuery("language", language);
    rec.addQuery("label", label);
    rec.query();
    if (rec.next())
        return rec.getValue("value");
};
]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-11-25 05:07:25</sys_created_on>
        <sys_id>551c326d9f132200a0d5b10f842e707c</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>CMPUtil</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_include_551c326d9f132200a0d5b10f842e707c</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-07-10 09:16:31</sys_updated_on>
    </sys_script_include>
</record_update>
