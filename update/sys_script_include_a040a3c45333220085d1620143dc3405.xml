<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_cmp.BlueprintFormBehaviorCreator</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>BlueprintFormBehaviorCreator</name>
        <script><![CDATA[var BlueprintFormBehaviorCreator = Class.create();
BlueprintFormBehaviorCreator.prototype = {
	createFormBehavior: function(blueprintGr){
	   var formBehaviorList = new sn_cmp_api.BlueprintServiceScript().createFormBehavior(blueprintGr.name);
		gs.info("Form Behavior created for blueprint - "+blueprintGr.name);
		var formBehaviorObjList = new global.JSON().decode(formBehaviorList);
		var fbGrList =[];
		for(var index_value in formBehaviorObjList){
		  var formBehavior = formBehaviorObjList[index_value];
		  var formBehaviorTable = 'sn_cmp_bp_form_behavior';
		  var fbGrObj = new GlideRecord(formBehaviorTable);
          fbGrObj.get(formBehavior.sysId);
		  fbGrList.push(fbGrObj);	
		}
		return fbGrList;
    },
	createFormBehaviorForOperation: function(blueprintGr, operationId){
	   var formBehaviorList = new sn_cmp_api.BlueprintServiceScript().createFormBehaviorForOperation(blueprintGr.name, operationId);
		gs.info("Form Behavior created for blueprint - "+blueprintGr.name);
		var formBehaviorObjList = new global.JSON().decode(formBehaviorList);
		var fbGrList =[];
		for(var index_value in formBehaviorObjList){
		  var formBehavior = formBehaviorObjList[index_value];	
		  var formBehaviorTable = 'sn_cmp_bp_form_behavior';
		  var fbGrObj = new GlideRecord(formBehaviorTable);
          fbGrObj.get(formBehavior.sysId);
		  var blueprintSCItem =  new BlueprintSCItemCreator();
		  //calling the existing method for creating the cat item
		  blueprintSCItem.createCatItem(fbGrObj);	
		  fbGrList.push(fbGrObj);	
		}
		return fbGrList;
    },
    initialize: function() {
    },

filterEventsForRuleInFormBehavior: function(formBehavior, catalogProp) {
	var formBehaviorId = "";
		//Querying the event table
	if(gs.nil(formBehavior)) {
		var catalogGlideRecord = new GlideRecord("sn_cmp_bp_catalog_prop");
		catalogGlideRecord.addQuery("sys_id",catalogProp);
		catalogGlideRecord.query();
		if(catalogGlideRecord.next()) {
			formBehaviorId = catalogGlideRecord.getValue("bp_cat_form_behavior");
		}
	} else {
		formBehaviorId = formBehavior;
	}
		return "form_behaviorIN" +formBehaviorId;
	},

    type: 'BlueprintFormBehaviorCreator'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-12-15 12:29:45</sys_created_on>
        <sys_id>a040a3c45333220085d1620143dc3405</sys_id>
        <sys_mod_count>28</sys_mod_count>
        <sys_name>BlueprintFormBehaviorCreator</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_include_a040a3c45333220085d1620143dc3405</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-09-29 10:25:06</sys_updated_on>
    </sys_script_include>
</record_update>
