<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_fix">
    <sys_script_fix action="INSERT_OR_UPDATE">
        <active>true</active>
        <before>false</before>
        <description>Fix script will fix the blueprint execution graph for upgrade scenarios.</description>
        <flush_cache>true</flush_cache>
        <name>FixStageResoruceOpGraph</name>
        <record_for_rollback>false</record_for_rollback>
        <run_once>true</run_once>
        <script><![CDATA[

      fixOperationGraph();

        //Migrating blueprint stage operation graph data
		function fixOperationGraph() {
		var newBpStageOpGraphGr = new GlideRecord("sn_cmp_bp_stage_res_op_graph");
		var bpStageOpGraphGr = new GlideRecord("sn_cmp_bp_stage_resource_op_graph");
			if(bpStageOpGraphGr.isValid() && newBpStageOpGraphGr.isValid()) {
				bpStageOpGraphGr.query();
				while(bpStageOpGraphGr.next()) {
						newBpStageOpGraphGr.initialize();
						newBpStageOpGraphGr.setValue('blueprint_stage_op',bpStageOpGraphGr.getValue('blueprint_stage_op'));
						newBpStageOpGraphGr.setValue('parent_operation',bpStageOpGraphGr.getValue('parent_operation'));
						newBpStageOpGraphGr.setValue('child_operation',bpStageOpGraphGr.getValue('child_operation'));
						newBpStageOpGraphGr.setValue('status',bpStageOpGraphGr.getValue('status'));
						newBpStageOpGraphGr.setValue('in_degree',bpStageOpGraphGr.getValue('in_degree'));
					    newBpStageOpGraphGr.insert();
				}
			}

			//Only once the data is being copied - fixing the execution graph if it is J-X upgrade, where x >= KP7 release
				gs.info("Executing fix script for showing the connections in blueprint execution plan");
				var bpStageOpGr = new GlideRecord('sn_cmp_bp_stage_op');
				bpStageOpGr.query();
				while(bpStageOpGr.next()) {
					var stageResOpGraphGr = new GlideRecord('sn_cmp_bp_stage_res_op_graph');
					stageResOpGraphGr.addQuery('blueprint_stage_op',bpStageOpGr.getUniqueValue());
					stageResOpGraphGr.query();
					if(!stageResOpGraphGr.next()) {
						var stageModelId = bpStageOpGr.blueprint_stage_model+'';
						var bpStageOpId = bpStageOpGr.getUniqueValue();
						//Generating the serial plan according to execution order
						new sn_cmp.CMPBPExecutionPlanGenerator().generateSerialExecutionPlanForOperation(stageModelId,bpStageOpId);
					}
				}
		}]]></script>
        <sys_class_name>sys_script_fix</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-06-18 07:28:23</sys_created_on>
        <sys_id>b3bafa810b321300aee1c97193673a2d</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>FixStageResoruceOpGraph</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_fix_b3bafa810b321300aee1c97193673a2d</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-06-18 11:05:09</sys_updated_on>
        <unloadable>false</unloadable>
    </sys_script_fix>
</record_update>
