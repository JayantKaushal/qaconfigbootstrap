<?xml version="1.0" encoding="UTF-8"?><record_update table="sn_cmp_rb_resourcescript">
    <sn_cmp_rb_resourcescript action="INSERT_OR_UPDATE">
        <name>List_Nodes_Response_Processor</name>
        <resource display_value="Azure Datacenter">ddf5cd6bd722220097eb6ccf6e610346</resource>
        <script>function processResponse(response, cloudServiceAccountId, ldc, &#13;
						  correlationId, step, requestorContext, stackId) {&#13;
	var rps = new sn_cmp_api.ResponseProcessorScript();&#13;
	var responseToProcess = rps.extractResponse(response);&#13;
	var responseObject = global.JSON.parse(responseToProcess);	&#13;
&#13;
	var responseProcessor = new sn_cmp.ResponseProcessor(cloudServiceAccountId, &#13;
												  null, //don't pass in LDC as it can be different for azure&#13;
												  'Azure API',&#13;
												  {"correlationId": correlationId,&#13;
												   "step": step,&#13;
												   "requestorContext": requestorContext,&#13;
												   "stackId": stackId});&#13;
	&#13;
	var cloudModelObject = &#13;
		responseProcessor.processResponseArray(responseObject,&#13;
											   'Microsoft.Compute/virtualMachines',&#13;
											   'virtual_machine_create_update_validator');&#13;
	&#13;
	var volumesPerLocation = {};&#13;
	for (var i=0; i&lt;responseObject.length; i++) {&#13;
		var vm = responseObject[i];&#13;
		var storageVolumes = [];&#13;
		var dataDisks = vm.properties.storageProfile.dataDisks;&#13;
		if (dataDisks) {&#13;
			for (var index=0; index&lt;dataDisks.length; index++) {&#13;
				var storageVolume = {};&#13;
				var dataDisk = dataDisks[index];&#13;
				storageVolume.Name = dataDisk.name;&#13;
				storageVolume.Properties = {};&#13;
				storageVolume.Properties.LeaseState = 'leased';&#13;
				if (!dataDisk.managedDisk)&#13;
					continue;&#13;
				storageVolume.id = dataDisk.managedDisk.id;&#13;
				storageVolume.Properties["Content-Length"] = dataDisk.diskSizeGB*1024*1024*1024;&#13;
				storageVolume.Properties.BlobType = "PageBlob";&#13;
				storageVolume.containerName = "";&#13;
				storageVolume.storageAccount = "";&#13;
				storageVolumes.push(storageVolume);&#13;
			}		&#13;
		}&#13;
		var osDisk = vm.properties.storageProfile.osDisk;&#13;
		if (osDisk.managedDisk) {&#13;
			var osVolume = {};&#13;
			osVolume.Name = osDisk.name;&#13;
			osVolume.Properties = {};&#13;
			osVolume.Properties.LeaseState = 'leased';&#13;
			osVolume.id = osDisk.managedDisk.id;&#13;
			osVolume.Properties["Content-Length"] = osDisk.diskSizeGB*1024*1024*1024;&#13;
			osVolume.Properties.BlobType = "PageBlob";&#13;
			osVolume.containerName = "";&#13;
			osVolume.storageAccount = "";&#13;
			storageVolumes.push(osVolume);&#13;
		}&#13;
		&#13;
		var location = vm.location;&#13;
		if (!volumesPerLocation[location])&#13;
			volumesPerLocation[location] = [];&#13;
		volumesPerLocation[location] = volumesPerLocation[location].concat(storageVolumes);&#13;
	}&#13;
	&#13;
	for (var volumeLocation in volumesPerLocation) {&#13;
		var volumes = volumesPerLocation[volumeLocation];&#13;
		if (volumes) {&#13;
			responseProcessor = new sn_cmp.ResponseProcessor(cloudServiceAccountId, &#13;
													  volumeLocation,&#13;
													  'Azure API',&#13;
													  {"correlationId": correlationId,&#13;
													   "step": step,&#13;
													   "requestorContext": requestorContext,&#13;
													   "stackId": stackId});&#13;
&#13;
			cloudModelObject = cloudModelObject.concat(&#13;
				responseProcessor.processResponseArray(volumes,&#13;
													   'Microsoft.Storage/blobs',&#13;
													   'storage_blob_create_update_validator'));&#13;
		}		&#13;
	}&#13;
	gs.info("cloudModelObjectVM|"+JSON.stringify(cloudModelObject));&#13;
	&#13;
	return global.JSON.stringify(cloudModelObject);&#13;
 }&#13;
		</script>
        <script_js><![CDATA[function processResponse(response, cloudServiceAccountId, ldc, 
						  correlationId, step, requestorContext, stackId) {
	var rps = new sn_cmp_api.ResponseProcessorScript();
	var responseToProcess = rps.extractResponse(response);
	var responseObject = global.JSON.parse(responseToProcess);	

	var responseProcessor = new sn_cmp.ResponseProcessor(cloudServiceAccountId, 
												  null, //don't pass in LDC as it can be different for azure
												  'Azure API',
												  {"correlationId": correlationId,
												   "step": step,
												   "requestorContext": requestorContext,
												   "stackId": stackId});
	
	var cloudModelObject = 
		responseProcessor.processResponseArray(responseObject,
											   'Microsoft.Compute/virtualMachines',
											   'virtual_machine_create_update_validator');
	
	var volumesPerLocation = {};
	for (var i=0; i<responseObject.length; i++) {
		var vm = responseObject[i];
		var storageVolumes = [];
		var dataDisks = vm.properties.storageProfile.dataDisks;
		if (dataDisks) {
			for (var index=0; index<dataDisks.length; index++) {
				var storageVolume = {};
				var dataDisk = dataDisks[index];
				storageVolume.Name = dataDisk.name;
				storageVolume.Properties = {};
				storageVolume.Properties.LeaseState = 'leased';
				if (!dataDisk.managedDisk)
					continue;
				storageVolume.id = dataDisk.managedDisk.id;
				storageVolume.Properties["Content-Length"] = dataDisk.diskSizeGB*1024*1024*1024;
				storageVolume.Properties.BlobType = "PageBlob";
				storageVolume.containerName = "";
				storageVolume.storageAccount = "";
				storageVolumes.push(storageVolume);
			}		
		}
		var osDisk = vm.properties.storageProfile.osDisk;
		if (osDisk.managedDisk) {
			var osVolume = {};
			osVolume.Name = osDisk.name;
			osVolume.Properties = {};
			osVolume.Properties.LeaseState = 'leased';
			osVolume.id = osDisk.managedDisk.id;
			osVolume.Properties["Content-Length"] = osDisk.diskSizeGB*1024*1024*1024;
			osVolume.Properties.BlobType = "PageBlob";
			osVolume.containerName = "";
			osVolume.storageAccount = "";
			storageVolumes.push(osVolume);
		}
		
		var location = vm.location;
		if (!volumesPerLocation[location])
			volumesPerLocation[location] = [];
		volumesPerLocation[location] = volumesPerLocation[location].concat(storageVolumes);
	}
	
	for (var volumeLocation in volumesPerLocation) {
		var volumes = volumesPerLocation[volumeLocation];
		if (volumes) {
			responseProcessor = new sn_cmp.ResponseProcessor(cloudServiceAccountId, 
													  volumeLocation,
													  'Azure API',
													  {"correlationId": correlationId,
													   "step": step,
													   "requestorContext": requestorContext,
													   "stackId": stackId});

			cloudModelObject = cloudModelObject.concat(
				responseProcessor.processResponseArray(volumes,
													   'Microsoft.Storage/blobs',
													   'storage_blob_create_update_validator'));
		}		
	}
	
	return global.JSON.stringify(cloudModelObject);
 }
		]]></script_js>
        <sys_class_name>sn_cmp_rb_resourcescript</sys_class_name>
        <sys_created_by>system</sys_created_by>
        <sys_created_on>2017-12-06 19:47:07</sys_created_on>
        <sys_id>d5f5cd6bd722220097eb6ccf6e61034e</sys_id>
        <sys_mod_count>58</sys_mod_count>
        <sys_name>List_Nodes_Response_Processor</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sn_cmp_rb_resourcescript_d5f5cd6bd722220097eb6ccf6e61034e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-12-07 00:23:43</sys_updated_on>
        <type>7</type>
    </sn_cmp_rb_resourcescript>
</record_update>
