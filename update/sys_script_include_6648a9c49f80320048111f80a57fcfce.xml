<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>sn_cmp.AWSCloudFormationTemplateUtil</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>AWSCloudFormationTemplateUtil</name>
        <script><![CDATA[var AWSCloudFormationTemplateUtil = Class.create();
AWSCloudFormationTemplateUtil.prototype = Object.extendsObject(CMPTemplateUtil, {

    initialize: function() {
		CMPTemplateUtil.prototype.initialize.call(this);
    },
	
	getInputs: function(templateObj, template) {
		var parameters = templateObj.Parameters;
		var metaData = templateObj.Metadata;
		var processedParams = {};	
		
		var order = 0;
		if (parameters) {			
			for (var param in parameters) {
				var paramValue = parameters[param];
				if(param == 'location') // we cannot consume location as is. Making it cft_location
					param = 'template_location';

				var parameter = {};
				processedParams[param] = parameter;
				
				parameter.type = this.getType(paramValue.Type, paramValue.NoEcho);
				parameter.source = 'Text';
				
				if (paramValue.hasOwnProperty('Default'))
					parameter.defaultValue = paramValue.Default;

				if (paramValue.hasOwnProperty('AllowedValues')) {
					parameter.value = global.JSON.stringify(paramValue.AllowedValues);
					parameter.source = 'CSVList';
				}
				
				if (paramValue.hasOwnProperty('AllowedPattern'))
					parameter.regex = paramValue.AllowedPattern;
				
				if (paramValue.hasOwnProperty('ConstraintDescription'))
					parameter.error_text = paramValue.ConstraintDescription;

			    if (metaData) {
				 var snMetaData = (metaData.hasOwnProperty('SNC::Parameter::Metadata')) ? metaData['SNC::Parameter::Metadata'] : '';
					if (!gs.nil(snMetaData)) {
						var matchedParam = (snMetaData.hasOwnProperty(param)) ? snMetaData[param] : '';
						if (!gs.nil(matchedParam)) {
							if ( matchedParam.hasOwnProperty('datasource') ) {
								//trim space
								parameter.value = matchedParam.datasource.replace(/\s+/g, '');
								parameter.source = 'Pools';
							}
						}
					}
				}

				parameter.mandatory = true;
				parameter.order = order;
				order++;
			}

			var tagParameter = {};
			processedParams['CustomTags'] = tagParameter;
			tagParameter.type = 'String';
			tagParameter.source = 'Text';
			tagParameter.mandatory = false;
			tagParameter.order = order;
		}
		
		return processedParams;
	},
	
	getType: function(type, noEcho) {
		if ((noEcho && typeof noEcho.toLowerCase === "function" && noEcho.toLowerCase() == "true") || noEcho == true)
			return "Password";
		
		switch (type){
			// There are other types that need to be handled
			case 'Number':
				return 'Integer';
			default:
				return 'String';
		}
	},

	extractTemplateDescription : function (template, templateObj) {
		return templateObj.Description || '';
	},
	
	getOutputAttribute : function(name, template, templateObj) {
		var outputs = templateObj.Outputs;
		var outputAttributes = {};
		var prefix = '${Host.Stack Orchestration Interface.CreateStack.Output.resp.outputs.';
        if (outputs) {
			Object.keys(outputs).forEach(function(val) {
				outputAttributes[val] = prefix + val + '}';
			});
			return Object.keys(outputAttributes).length > 0 ? global.JSON.stringify(outputAttributes) : '';
		}
		 return '';
	},
	
	validateTemplate: function(templateObj, template) {
		var errorMessage = "";
		if (!templateObj.hasOwnProperty('Resources')) {
			errorMessage = gs.getMessage('Supplied template is not in the valid format.  It must have a \'Resources\' section');
		} else if (templateObj.hasOwnProperty('Parameters')) {
			var errorMessages = [];
			for (var paramName in templateObj.Parameters) {
				var output = new BlueprintTemplateValidator()._validateParamName(paramName);
				if (output) {
					errorMessages.push(gs.getMessage('For parameter {0}:<BR> {1}', [paramName, output]));
				}
			}
			errorMessage = errorMessages.join('<BR>');
		}
		
		//return object should have "isValid" and "errorMessage"
		var result = {};
		result.isValid = errorMessage ? false : true;
		result.errorMessage = errorMessage;
		return result;
	},

    type: 'AWSCloudFormationTemplateUtil'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>jimmy.yuan</sys_created_by>
        <sys_created_on>2016-12-27 13:38:20</sys_created_on>
        <sys_id>6648a9c49f80320048111f80a57fcfce</sys_id>
        <sys_mod_count>63</sys_mod_count>
        <sys_name>AWSCloudFormationTemplateUtil</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_include_6648a9c49f80320048111f80a57fcfce</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-08-02 17:28:42</sys_updated_on>
    </sys_script_include>
</record_update>
