<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>sn_cmp.PoolExporter</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>PoolExporter</name>
        <script><![CDATA[var PoolExporter = Class.create();
PoolExporter.prototype = Object.extendsObject(global.CMPExporterUtil, {
   
   initialize: function() {
       
   },

   populateEntriesForUpdateSet : function(sysId, tableName, entityUpdateSetList) {
     var recordGR = new GlideRecord(tableName);
     if(recordGR.get(sysId)) 
       this.addRecordsToUpdateSetList(recordGR, entityUpdateSetList);
    },

   getAllPoolsAndRelatedEntities : function unction (selectedPoolsList, entityUpdateSetList, exporterLog) {
      for (var i = 0; i < selectedPoolsList.length; i++){
            var poolGR = new GlideRecord('sn_cmp_resource_pool');
            var poolId = selectedPoolsList[i].id;
            if (poolGR.get(poolId)){
            this.populateEntriesForUpdateSet(poolGR.sys_id, poolGR.sys_class_name, entityUpdateSetList);
            this.getAllPoolFilters(poolGR.sys_id, entityUpdateSetList);
         }
      }
   },
	
	createUpdateSetForPool: function(selectedPool, entityUpdateSetList){
		var poolGR = new GlideRecord('sn_cmp_resource_pool');
            var poolId = selectedPool.id;
            if (poolGR.get(poolId)){
				this.populateEntriesForUpdateSet(poolGR.sys_id, poolGR.sys_class_name, entityUpdateSetList);
				this.getAllPoolFilters(poolGR.sys_id, entityUpdateSetList);
			}
	},

   getAllPoolFilters : function (poolId, entityUpdateSetList) {
      var poolFilterGr = new GlideRecord('sn_cmp_rp_filter');
      poolFilterGr.addQuery('resource_pool', poolId);
      poolFilterGr.query();
      while(poolFilterGr.next()) {
         this.populateEntriesForUpdateSet(poolFilterGr.sys_id, poolFilterGr.sys_class_name, entityUpdateSetList);
        this.getAllPoolFilterValues(poolFilterGr.sys_id, entityUpdateSetList);
      }
   },
	
	getAllPoolFilterValues : function (poolFilterId, entityUpdateSetList) {
      var poolFilterValueGr = new GlideRecord('sn_cmp_rp_filter_value');
      poolFilterValueGr.addQuery('filter', poolFilterId);
      poolFilterValueGr.query();
      while(poolFilterValueGr.next()) 
         this.populateEntriesForUpdateSet(poolFilterValueGr.sys_id, poolFilterValueGr.sys_class_name, entityUpdateSetList);
   },

   type: 'PoolExporter'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2018-02-01 11:13:56</sys_created_on>
        <sys_id>a9ac4e490b001300e257aac125673ae1</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>PoolExporter</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_include_a9ac4e490b001300e257aac125673ae1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-06-15 18:32:58</sys_updated_on>
    </sys_script_include>
</record_update>
