<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_cmp.CMPGetTotalGroupQuota</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CMPGetTotalGroupQuota</name>
        <script><![CDATA[var CMPGetTotalGroupQuota = Class.create();

var VM_Count    = '675454c10b232200e586a2c563673a47';
var vCPUs_Count = '5a359cc10b232200e586a2c563673aa1';
var StorageVolume_Size  = '78241cc10b232200e586a2c563673ab3';

CMPGetTotalGroupQuota.prototype = {
    initialize: function() {
    },
	
// Get vCPU's quota of all the groups
getVcpuQuota: function()
{ 
	var totalQuota = 0;
	var quota = new GlideAggregate('sn_cmp_quota_association');	
	quota.addAggregate('sum','max_limit');
    quota.addQuery('quota_definition',vCPUs_Count);	
	quota.query();
	while (quota.next())
		totalQuota = totalQuota+(parseInt(quota.getAggregate('sum','max_limit')));
	var obj = {
				"Total_vCPU_Quota" : totalQuota,
		        "Consumption" : parseInt(new sn_cmp_api.QuotaServiceScript().getActiveInstance('vCPUs_Count'))
		};
	return obj;
},	
// Get Storage quota of all the groups
getStorageQuota: function()
{ 
	var totalQuota = 0;
	var quota = new GlideAggregate('sn_cmp_quota_association');	
	quota.addAggregate('sum','max_limit');
    quota.addQuery('quota_definition',StorageVolume_Size);	
	quota.query();
	while (quota.next()){
		var temp = parseInt(quota.getAggregate('sum','max_limit'));
		gs.info(temp);
       totalQuota = totalQuota+(parseInt(quota.getAggregate('sum','max_limit')));
	}
	var obj = {
				"Total_Storage_Quota" : totalQuota,
		        "Consumption" : parseInt(new sn_cmp_api.QuotaServiceScript().getActiveInstance('StorageVolume_Size'))
		};
	return obj;
},
	
// Get VM quota of all the groups
getVmQuota: function()
{ 
	var totalQuota = 0;
	var quota = new GlideAggregate('sn_cmp_quota_association');	
	quota.addAggregate('sum','max_limit');
    quota.addQuery('quota_definition',VM_Count);	
	quota.query();
	while (quota.next())
		totalQuota = totalQuota+(parseInt(quota.getAggregate('sum','max_limit')));
	var obj = {
				"Total_VM_Quota" : totalQuota,
		        "Consumption" : parseInt(new sn_cmp_api.QuotaServiceScript().getActiveInstance('VM_Count'))
		};
	return obj;
},

    type: 'CMPGetTotalGroupQuota'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-08-10 05:28:52</sys_created_on>
        <sys_id>a73ae7a80b240300d763a2c563673ad2</sys_id>
        <sys_mod_count>4</sys_mod_count>
        <sys_name>CMPGetTotalGroupQuota</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_include_a73ae7a80b240300d763a2c563673ad2</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-08-16 07:39:25</sys_updated_on>
    </sys_script_include>
</record_update>
