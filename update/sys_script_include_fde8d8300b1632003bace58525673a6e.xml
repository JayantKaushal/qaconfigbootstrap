<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>sn_cmp.CMPGetBpCatalogAndParentFormListAction</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CMPGetBpCatalogAndParentFormListAction</name>
        <script><![CDATA[var CMPGetBpCatalogAndParentFormListAction = Class.create();
CMPGetBpCatalogAndParentFormListAction.prototype = Object.extendsObject(sn_smd.SMBaseAction, {
     doAction: function(params) {
		try{
				if (!params.blueprint_id) {
					throw sn_smd.SMErrorHelper.createScriptAPIError(
						gs.getMessage("Illegal parameter"),
						"CMPGetCatalogItemAndParentFormList.doAction: Undefined blueprint Id",
						null
					);
				}
			
			var blueprintId = params.blueprint_id; 
			var catItemList = [];
			var parentFormList = [];
			
			//This is for getting catalog items for blueprint
			var gr = new GlideRecord('sn_cmp_bp_cat_item');
				gr.addQuery("blue_print", params.blueprint_id);
				gr.orderBy('name');
				gr.query();
			
			while (gr.next()) {
				var catListObj = {};
				catListObj.id = gr.getValue('sys_id');
				catListObj.name = gr.getDisplayValue('name');
				catItemList.push(catListObj);
			}
			
			//This is for getting formbehaviour for blueprints
			var formgr = new GlideRecord('sn_cmp_bp_form_behavior');
				formgr.addQuery("bp_association", params.blueprint_id);
			    formgr.addQuery("stage_operation", params.stage_operation_id);
				formgr.orderBy('name');
				formgr.query();
			
			while (formgr.next()) {
				var parentFormListObj = {};
				parentFormListObj.id = formgr.getValue('sys_id');
				parentFormListObj.name = formgr.getDisplayValue('alias_name');
				parentFormListObj.operation = formgr.getDisplayValue('stage_operation');
				parentFormListObj.operationId = formgr.getValue('stage_operation');
				parentFormList.push(parentFormListObj);
			}
			
			var responseObj = {
				catalogItem : catItemList,
				parentFormList : parentFormList
			};
			
			return responseObj;
		} catch (error) {
			var e = error;
			throw sn_smd.SMErrorHelper.createScriptAPIError(
				gs.getMessage("Failed to get blueprint form list"),
				"CMPGetCatalogItemAndParentFormList.doAction(): Failed to get blueprint catalog items and parent form behaviour.",
				error
			);
		}
	 },

    type: 'CMPGetBpCatalogAndParentFormListAction'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-04-20 12:10:06</sys_created_on>
        <sys_id>fde8d8300b1632003bace58525673a6e</sys_id>
        <sys_mod_count>10</sys_mod_count>
        <sys_name>CMPGetBpCatalogAndParentFormListAction</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_include_fde8d8300b1632003bace58525673a6e</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2017-04-21 12:11:22</sys_updated_on>
    </sys_script_include>
</record_update>
