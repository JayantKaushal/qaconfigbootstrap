<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category/>
        <client_script><![CDATA[function($scope, $rootScope, $location) {
	/* widget controller */
	var c = this;
	var params = $location.search();

	$rootScope.$on('capActivitiesEvent', function(e,info) {
		$location.search('selected_card',null);
		$location.search('sys_id',null);
		$location.search('active_tab',null);

		if (info.cat == "new_incident")
			$location.search('sub_category', info.cat).search('table',info.table).search('sys_id','-1').search('spa', '1').replace();
		else if (info.cat == "form")
			$location.search('sub_category', info.cat).search('table',info.table).search('sys_id',info.sys_id).search('spa', '1').replace();
		else if (info.cat == "form_load") {
			$rootScope.$broadcast(info.eventName, info.table, info.sys_id);
			return false;
		} else	
			$location.search('sub_category', info.cat).search('spa', '1').replace();


		c.data.cat = info.cat;
		c.data.loadingWidget = true;
		c.data.widget = null;

		c.server.update().then(function() {
			c.data.loadingWidget = false;
		});
	})


	$scope.$on('data_table.click', function(e, parms) {
		var params = { cat:(parms.cat)? parms.cat : 'form', table:parms.table, sys_id : parms.sys_id};

		if(parms.callbackEventName) 
			params.eventName = parms.callbackEventName;

		$rootScope.$broadcast('capActivitiesEvent', params);
	});

	$scope.$on('select2.ready', function(e, $el) {
		if ($scope.data.invalid_table) {
			e.stopPropagation();
			$el.select2('open');
		}
	})

	$scope.selectedTable = {
		displayValue: $scope.data.table,
		value: $scope.data.table
	}

	function resetParams() {
		delete $scope.data.p;
		delete $scope.data.o;
		delete $scope.data.d;
		delete $scope.data.q;
		delete $scope.data.table;
	}

	$scope.onChange = function() {
		resetParams();
		$scope.data.table = $scope.selectedTable.value;
		$scope.data.fields = "";  // reset
		$scope.data.invalid_table = false;
		getData(true);
	}

	function getData(updateUrl) {
		var f = $scope.data;
		spUtil.update($scope).then(function(data) {
			$scope.data.dataTableWidget = null;
			$timeout(function() {
				$scope.data.dataTableWidget = data.dataTableWidget;
				angular.extend($scope.data.dataTableWidget.options, $scope.options);
				if (updateUrl)
					setPermalink(f.table);
			});
		});
	}

	function setPermalink(table) {
		$scope.ignoreLocationChange = true;
		var searchParms = $location.search();
		var search = {
			spa: 1,
			table: table,
			id: searchParms.id
		};
		$location.search(search);
	}

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.errorMsg {
	font-size: 1.5em;
  text-align: center;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>false</has_preview>
        <id>cap_activities_widget</id>
        <internal>false</internal>
        <link/>
        <name>CAP Activities Widget</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	data.widget = "";
	data.form = "";
	var filter = "";
	var fields = "";
	var table = "";
	var sys_id = "";

	data.sub_category = $sp.getParameter('sub_category');
	var current_userid = gs.getUserID();

	if (input && input.cat)
		getWidget(input.cat);
	else if (data.sub_category)
		getWidget(data.sub_category);
	else 
		getWidget('request');

	data.sub_category_labels = {
		'incident': "Incidents",
		'sc_task': "Tasks",
		'change_request': "Change Requests",
		'cmp_audit_log': "Audit Logs",
		'sn_cmp_cloud_event': "Cloud Events",
		'request': "Requests",
		'new_incident': "Report an Incident",
		'sn_cmp_ssh_credentials':"Keys",
		'sn_cmp_lease_status':"Leases",
		'sn_cmp_scheduled_operations':"Scheduled Operations"
	};

	function getWidget(sub_category) {
		switch (sub_category) {
			case "incident":
				fields = "number,category,subcategory,short_description,cmdb_ci,impact,state,assigned_to";
				filter = "category=Cloud Management";
				getTableWidget(true,filter,fields);
				break;
			case "change_request":
				fields = "number,cmdb_ci,category,short_description,approval";
				filter = "category=Cloud Management";
				getTableWidget(false,filter,fields);
				break;
			case "cmp_audit_log":
				filter = "";
				getTableWidget(false,filter);
				break;
			case "sn_cmp_cloud_event":
				filter = "";
				getTableWidget(false,filter);
				break;
			case "sc_task":
				fields = "number,state,short_description,request_item,assigned_to,cmdb_ci";
				filter = "assigned_to="+current_userid;
				getTableWidget(false,filter,fields);
				break;
			case "sn_cmp_ssh_credentials":
				fields = "name,sys_created_on";
				filter = "assigned_to="+current_userid;
				getTableWidget(false,filter,fields,true);
				break;
			case "request":
				data.widget = $sp.getWidget('cap-activities-requests', data);
				break;
			case "form":
				table = $sp.getParameter('table');
				sys_id = $sp.getParameter('sys_id');
				data.widget = $sp.getWidget('cap-form', {table: table, sys_id: sys_id, hideRelatedLists: true, disableUIActions: true,view: 'User_Portal'});
				break;
			case "new_incident":
				data.widget = $sp.getWidget('cap-incident-form', data);
				break;
			case "sn_cmp_lease_status":
				fields = "operation_time,target,name,status,action";
				var dt = new GlideDate();
				dt.subtract(86400000);
				filter = "source=Lease^operation_time>="+dt+"^ORDERBYoperation_time";
				getTableWidget(false,filter,fields,false,"Extend Lease","sn_cmp_scheduled_operation", "Lease Operations");
				break;
			case "sn_cmp_scheduled_operation":
				fields = "operation_time,target,name,status,action";
				var dt = new GlideDate();
				dt.subtract(86400000);
				filter = "source=Schedule^operation_time>="+dt+"^ORDERBYoperation_time";
				getTableWidget(false,filter,fields,false,"Skip Operation,Cancel Schedule","sn_cmp_scheduled_operation", "Business Schedule Operations");
				break;
			default:
				data.widget = $sp.getWidget('cap-activities-requests', data);
		}
	}

	function getTableWidget(create_new,filter,fields,generateKey,rowActions,table,title) {
		data.table = table || $sp.getParameter('sub_category') || $sp.getParameter('t');
		data.view = $sp.getParameter('view');

		if (!data.table) {
			data.invalid_table = true;
			data.table_label = "";
			return;
		}

		var gr = new GlideRecordSecure(data.table);
		if (!gr.isValid()) {
			data.invalid_table = true;
			data.table_label = data.table;
			return;
		}


		data.table_label = gr.getLabel();
		data.fields = fields || $sp.getListColumns(data.table, data.view);
		data.title =  title || gr.getED().getPlural();
		copyParameters(data, ['p', 'o', 'd']);
		copyParameters(data, ['relationship_id', 'apply_to', 'apply_to_sys_id']);
		data.show_keywords  = false;
		data.show_key = generateKey || false;
		data.show_breadcrumbs = false;
		data.filter = filter;
		data.fromUrl = true;
		data.show_new = create_new;
		data.row_actions = rowActions;

		data.widget = $sp.getWidget('cap-activities-data-table', data);

	}

	function copyParameters(to, names) {
		names.forEach(function(name) {
			data[name] = $sp.getParameter(name);
		});
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2017-09-03 17:50:08</sys_created_on>
        <sys_id>e06ff9ec0b010300eff7ef9bb4673ac1</sys_id>
        <sys_mod_count>46</sys_mod_count>
        <sys_name>CAP Activities Widget</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sp_widget_e06ff9ec0b010300eff7ef9bb4673ac1</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-06-06 12:27:05</sys_updated_on>
        <template><![CDATA[<div>
  <div ng-if="data.widget">
  	<sp-widget widget="data.widget"></sp-widget> 
  </div>
</div>]]></template>
    </sp_widget>
</record_update>
