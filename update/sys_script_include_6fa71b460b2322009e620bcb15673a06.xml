<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>sn_cmp.CMPGetAllBlueprintsAction</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>CMPGetAllBlueprintsAction</name>
        <script><![CDATA[var CMPGetAllBlueprintsAction = Class.create();
CMPGetAllBlueprintsAction.prototype = Object.extendsObject(sn_smd.SMBaseAction, {
     doAction: function(params) {
		try{
			//Get blueprint list
			//Based on selected layer
			//and pagination
			var bpGR = new GlideRecord('sn_cmp_blueprint_service_layer');
			bpGR.addNullQuery("svclayer_sys_id");
			bpGR.query();
			while(bpGR.next()){
				this.fixImportedBlueprint(bpGR.getValue('blueprint_sys_id'));
			}
			var bpLayerName = params.selected_layer;
			var bpLayerId = params.selected_layer_id;
			var bpName = params.bp_name;
			var currentPage= params.current_page;
			var bpStatusId = params.selected_status_id;
			var limit = params.limit;
			var bpCategory = params.selected_category;
			var bpCategoryId = params.selected_category_id;
			var user = gs.getUser();
			var blueprints = new BlueprintServiceHelper().getAllBlueprint(bpLayerId, bpName,currentPage,limit,bpStatusId,bpCategoryId);

			var bluePrint = new GlideRecord('sn_cmp_bp_blueprint');
			if(bpLayerId || !gs.nil(bpLayerId))
				bluePrint.addQuery("layer", bpLayerId);
			if(params.bp_name || params.bp_name != "")
				bluePrint.addQuery("name","CONTAINS", params.bp_name);
			if(bpStatusId) {
				bluePrint.addQuery("status", bpStatusId);
			}
			if(bpCategoryId || !gs.nil(bpCategoryId))
				bluePrint.addQuery("category", bpCategoryId);
			
			bluePrint.query();

			//Setting permission for each blueprint
			var gr = new GlideRecord('sn_cmp_bp_blueprint');
			if(bpLayerId || !gs.nil(bpLayerId))
				gr.addQuery("layer", bpLayerId);
			if(params.bp_name || params.bp_name != "")
				gr.addQuery("name","CONTAINS", params.bp_name);
			if(bpStatusId) {
				gr.addQuery("status", bpStatusId);
			}
			if(bpCategoryId || !gs.nil(bpCategoryId))
				gr.addQuery("category", bpCategoryId);
			gr.query();

			//Setting permission for each blueprint
			for (var i=0; i< blueprints.length; i++) {
				var checkPermissionObj = new CMPCheckPermission();
	            var sys_id = blueprints[i].id;
				gr.addQuery("sys_id", sys_id);
				gr.query();
				gr.next();
				var created_by = gr.getValue('sys_created_by');
				if (gs.getUserName() == 'admin' || gs.getUser().hasRole('sn_cmp.cmp_root_admin') || created_by == gs.getUserName()) {
					blueprints[i]['editPermission'] = true;
					blueprints[i]['deletePermission'] = true;
				} else {
					var responseObj1 = checkPermissionObj.checkPermission('sn_cmp_bp_blueprint',blueprints[i].id, gs.getUserID(), 'write');
					var responseObj2 = checkPermissionObj.checkPermission('sn_cmp_bp_blueprint',blueprints[i].id, gs.getUserID(), 'delete');
					blueprints[i]['editPermission'] = responseObj1;
					blueprints[i]['deletePermission'] = responseObj2;
				}
			}

			var responseObj = {
				blueprintsList : blueprints,
				totalRecords : bluePrint.getRowCount()
			};
			return responseObj;

		}catch (error) {
			var e = error;
			throw sn_smd.SMErrorHelper.createScriptAPIError(
				gs.getMessage("Failed to get all blueprints."),
				"CMPGetAllBlueprintsAction.doAction(): Failed to get all blueprints",
				error
			);
		}
    },
	
	fixImportedBlueprint : function(blueprintId){
		var params={"blueprintId":blueprintId};
		var repairBP = new sn_cmp.CMPRepairBlueprintAction();
		repairBP.doAction(params);
	},
	
    type: 'CMPGetAllBlueprintsAction'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2016-12-09 06:21:38</sys_created_on>
        <sys_id>6fa71b460b2322009e620bcb15673a06</sys_id>
        <sys_mod_count>49</sys_mod_count>
        <sys_name>CMPGetAllBlueprintsAction</sys_name>
        <sys_package display_value="Cloud Management Platform" source="sn_cmp">80d50579eb203200979aa5115206fedd</sys_package>
        <sys_policy/>
        <sys_scope display_value="Cloud Management Platform">80d50579eb203200979aa5115206fedd</sys_scope>
        <sys_update_name>sys_script_include_6fa71b460b2322009e620bcb15673a06</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2018-03-14 14:02:30</sys_updated_on>
    </sys_script_include>
</record_update>
